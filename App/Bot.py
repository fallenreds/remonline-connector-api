import json
from aiogram import Bot, Dispatcher, executor, types, filters
from DB import DBConnection
from config import *
from RestAPI.RemonlineAPI import RemonlineAPI

CRM = RemonlineAPI(REMONLINE_API_KEY_PROD)
warehouse = CRM.get_main_warehouse_id()


def get_all_goods():
    run = True
    goods = []
    page = 1
    while run:
        response = CRM.get_goods(warehouse, page=page)
        page += 1
        if len(response["data"]) < 50:
            run = False

        if len(response["data"]):
            goods += response["data"]
    return {"data": goods}


bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_message(message):
    greetings_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name}. \n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ üõí, –∏–ª–∏ –∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ üì¶"

    markup_k = types.ReplyKeyboardMarkup(resize_keyboard=True)
    order_status_button = types.KeyboardButton("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ üì¶")
    markup_k.add(order_status_button)
    await bot.send_message(message.chat.id, text=greetings_text, reply_markup=markup_k)


async def make_order(message, data, goods, order):

    text = f'<b>–ò–º—è:</b> {order["name"]}\n<b>–§–∞–º–∏–ª–∏—è</b>: {order["last_name"]}\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order["nova_post_address"]} \n'
    if order["prepayment"]:
        text +=f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞:</b> –ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–ø–ª–∞—Ç–µ\n\n'
    else:
        text += f'<b>–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞:</b> –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n\n'
    to_pay = 0
    for obj in data:
        good = find_good(goods, obj['good_id'])
        to_pay += good["price"][PRICE_ID_PROD] * obj['count']
        text += f"<b>–¢–æ–≤–∞—Ä:</b> {good['title']} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {obj['count']}\n\n"
    text += f"<b>–ö –æ–ø–ª–∞—Ç–µ {to_pay}üí≥</b>"
    await bot.send_message(message.chat.id, text=text)
    if order["prepayment"] and not order["is_paid"]:
        await bot.send_invoice(message.chat.id,
                               title="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
                               description='–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –µ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç—å',
                               provider_token='5322214758:TEST:4eb03c3b-916d-436b-aba8-3b70b54c711e',
                               currency="uah",
                               is_flexible=False,
                               prices=[types.LabeledPrice(label='–ù–∞—Å—Ç–æ—è—â–∞—è –ú–∞—à–∏–Ω–∞ –í—Ä–µ–º–µ–Ω–∏', amount=int(to_pay)*100)],
                               payload="test"


        )


def find_good(goods, good_id):
    for good in goods:
        if good["id"] == good_id:
            return good


@dp.message_handler(filters.Text(contains="—Å—Ç–∞—Ç—É—Å", ignore_case=True))
async def check_status(message: types.Message):
    db = DBConnection("info.db")
    orders = db.get_all_orders(int(message.chat.id))
    db.connection.close()
    if len(orders) == 0:
        return await message.reply(f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")

    goods = get_all_goods()["data"]
    await message.reply(f"–£ –≤–∞—Å {len(orders)} –∑–∞–∫–∞–∑–æ–≤:")

    for order in orders:
        data = json.loads(order["goods_list"].replace("'", '"'))
        await make_order(message, data, goods, order)


executor.start_polling(dp, skip_updates=True)

# @bot.message_handler(commands=['start'])
# def start_message(message):
#     markup_k = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     markup_i = types.InlineKeyboardMarkup(row_width=3)
#
#     shop_button = types.KeyboardButton("–ú–∞–≥–∞–∑–∏–Ωüõí", web_app=types.WebAppInfo(url=WEB_URL))
#     form_button = types.KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üõç", web_app=form_web_app)
#     cart_button = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", web_app=cart_web_app)
#     markup_i.add(shop_button, form_button, cart_button)
#
#
#     bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç, —è –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Äüëã.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup_i)
#
#
#
# @bot.message_handler(content_types=["text"])
# def catalog(message):
#     print(message)
#     if message.text == "–ö–∞—Ç–∞–ª–æ–≥":
#         markup = types.InlineKeyboardMarkup(row_width=2)
#         category_button = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category")
#         text_search = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data='textsearch')
#         markup.add(category_button, text_search)
#         search_ans = bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞', reply_markup=markup)
#     else:
#         search_ans = bot.send_message(message.chat.id, text="–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
#
# @bot.message_handler(content_types=["web_app_data"])
# def web_app_handler(message):
#     print(message.web_app_data.data )
#
# @bot.callback_query_handler(func=lambda call: True)
# def inline_callback(call):
#     print(call)
#     form_web_app.check_json()
#     if call.data == 'category':
#         category_data = remonline.get_categories().get("data")
#         category = Category(category_data)
#         markup = types.InlineKeyboardMarkup(row_width=8)
#         for head in category.get_headers():
#             button = types.InlineKeyboardButton(head.title, callback_data=head.id)
#             markup.add(button)
#         bot.send_message(call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ", reply_markup=markup)
#     if call.data == 'textsearch':
#         bot.send_message(call.message.chat.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
